diff --git a/include/spdlog/details/log_msg.h b/include/spdlog/details/log_msg.h
index a9fe920..f6b2ef2 100644
--- a/include/spdlog/details/log_msg.h
+++ b/include/spdlog/details/log_msg.h
@@ -42,8 +42,8 @@ struct log_msg
     level::level_enum level;
     log_clock::time_point time;
     size_t thread_id;
-    fmt::MemoryWriter raw;
-    fmt::MemoryWriter formatted;
+    MemoryWriter raw;
+    MemoryWriter formatted;
     size_t msg_id;
 };
 }
diff --git a/include/spdlog/details/logger_impl.h b/include/spdlog/details/logger_impl.h
index 8804474..fc2f455 100644
--- a/include/spdlog/details/logger_impl.h
+++ b/include/spdlog/details/logger_impl.h
@@ -69,7 +69,7 @@ inline void spdlog::logger::log(level::level_enum lvl, const char* fmt, const Ar
 #if defined(SPDLOG_FMT_PRINTF)
         fmt::printf(log_msg.raw, fmt, args...);
 #else
-        log_msg.raw.write(fmt, args...);
+        fmt::format_to(log_msg.raw, fmt, args...);
 #endif
         _sink_it(log_msg);
     }
@@ -350,7 +350,7 @@ inline void spdlog::logger::_default_err_handler(const std::string &msg)
     char date_buf[100];
     std::strftime(date_buf, sizeof(date_buf), "%Y-%m-%d %H:%M:%S", &tm_time);
     details::log_msg  err_msg;
-    err_msg.formatted.write("[*** LOG ERROR ***] [{}] [{}] [{}]{}", name(), msg, date_buf, details::os::eol);
+    fmt::format_to(err_msg.formatted.buf, "[*** LOG ERROR ***] [{}] [{}] [{}]{}", name(), msg, date_buf, details::os::eol);
     sinks::stderr_sink_mt::instance()->log(err_msg);
     _last_err_time = now;
 }
diff --git a/include/spdlog/details/pattern_formatter_impl.h b/include/spdlog/details/pattern_formatter_impl.h
index a73f5de..6723074 100644
--- a/include/spdlog/details/pattern_formatter_impl.h
+++ b/include/spdlog/details/pattern_formatter_impl.h
@@ -120,16 +120,16 @@ class B_formatter:public flag_formatter
 
 
 //write 2 ints separated by sep with padding of 2
-static fmt::MemoryWriter& pad_n_join(fmt::MemoryWriter& w, int v1, int v2, char sep)
+static MemoryWriter& pad_n_join(MemoryWriter& w, int v1, int v2, char sep)
 {
-    w << fmt::pad(v1, 2, '0') << sep << fmt::pad(v2, 2, '0');
+    w << pad(v1, 2, '0') << sep << pad(v2, 2, '0');
     return w;
 }
 
 //write 3 ints separated by sep with padding of 2
-static fmt::MemoryWriter& pad_n_join(fmt::MemoryWriter& w, int v1, int v2, int v3, char sep)
+static MemoryWriter& pad_n_join(MemoryWriter& w, int v1, int v2, int v3, char sep)
 {
-    w << fmt::pad(v1, 2, '0') << sep << fmt::pad(v2, 2, '0') << sep << fmt::pad(v3, 2, '0');
+    w << pad(v1, 2, '0') << sep << pad(v2, 2, '0') << sep << pad(v3, 2, '0');
     return w;
 }
 
@@ -150,7 +150,7 @@ class C_formatter SPDLOG_FINAL:public flag_formatter
 {
     void format(details::log_msg& msg, const std::tm& tm_time) override
     {
-        msg.formatted << fmt::pad(tm_time.tm_year % 100, 2, '0');
+        msg.formatted << pad(tm_time.tm_year % 100, 2, '0');
     }
 };
 
@@ -180,7 +180,7 @@ class m_formatter SPDLOG_FINAL:public flag_formatter
 {
     void format(details::log_msg& msg, const std::tm& tm_time) override
     {
-        msg.formatted << fmt::pad(tm_time.tm_mon + 1, 2, '0');
+        msg.formatted << pad(tm_time.tm_mon + 1, 2, '0');
     }
 };
 
@@ -189,7 +189,7 @@ class d_formatter SPDLOG_FINAL:public flag_formatter
 {
     void format(details::log_msg& msg, const std::tm& tm_time) override
     {
-        msg.formatted << fmt::pad(tm_time.tm_mday, 2, '0');
+        msg.formatted << pad(tm_time.tm_mday, 2, '0');
     }
 };
 
@@ -198,7 +198,7 @@ class H_formatter SPDLOG_FINAL:public flag_formatter
 {
     void format(details::log_msg& msg, const std::tm& tm_time) override
     {
-        msg.formatted << fmt::pad(tm_time.tm_hour, 2, '0');
+        msg.formatted << pad(tm_time.tm_hour, 2, '0');
     }
 };
 
@@ -207,7 +207,7 @@ class I_formatter SPDLOG_FINAL:public flag_formatter
 {
     void format(details::log_msg& msg, const std::tm& tm_time) override
     {
-        msg.formatted << fmt::pad(to12h(tm_time), 2, '0');
+        msg.formatted << pad(to12h(tm_time), 2, '0');
     }
 };
 
@@ -216,7 +216,7 @@ class M_formatter SPDLOG_FINAL:public flag_formatter
 {
     void format(details::log_msg& msg, const std::tm& tm_time) override
     {
-        msg.formatted << fmt::pad(tm_time.tm_min, 2, '0');
+        msg.formatted << pad(tm_time.tm_min, 2, '0');
     }
 };
 
@@ -225,7 +225,7 @@ class S_formatter SPDLOG_FINAL:public flag_formatter
 {
     void format(details::log_msg& msg, const std::tm& tm_time) override
     {
-        msg.formatted << fmt::pad(tm_time.tm_sec, 2, '0');
+        msg.formatted << pad(tm_time.tm_sec, 2, '0');
     }
 };
 
@@ -236,7 +236,7 @@ class e_formatter SPDLOG_FINAL:public flag_formatter
     {
         auto duration = msg.time.time_since_epoch();
         auto millis = std::chrono::duration_cast<std::chrono::milliseconds>(duration).count() % 1000;
-        msg.formatted << fmt::pad(static_cast<int>(millis), 3, '0');
+        msg.formatted << pad(static_cast<int>(millis), 3, '0');
     }
 };
 
@@ -247,7 +247,7 @@ class f_formatter SPDLOG_FINAL:public flag_formatter
     {
         auto duration = msg.time.time_since_epoch();
         auto micros = std::chrono::duration_cast<std::chrono::microseconds>(duration).count() % 1000000;
-        msg.formatted << fmt::pad(static_cast<int>(micros), 6, '0');
+        msg.formatted << pad(static_cast<int>(micros), 6, '0');
     }
 };
 
@@ -258,7 +258,7 @@ class F_formatter SPDLOG_FINAL:public flag_formatter
     {
         auto duration = msg.time.time_since_epoch();
         auto ns = std::chrono::duration_cast<std::chrono::nanoseconds>(duration).count() % 1000000000;
-        msg.formatted << fmt::pad(static_cast<int>(ns), 9, '0');
+        msg.formatted << pad(static_cast<int>(ns), 9, '0');
     }
 };
 
@@ -389,7 +389,7 @@ class i_formatter SPDLOG_FINAL :public flag_formatter
 {
     void format(details::log_msg& msg, const std::tm&) override
     {
-        msg.formatted << fmt::pad(msg.msg_id, 6, '0');
+        msg.formatted << pad(msg.msg_id, 6, '0');
     }
 };
 
@@ -397,7 +397,7 @@ class v_formatter SPDLOG_FINAL:public flag_formatter
 {
     void format(details::log_msg& msg, const std::tm&) override
     {
-        msg.formatted << fmt::StringRef(msg.raw.data(), msg.raw.size());
+        msg.formatted << fmt::string_view(msg.raw.buf.data(), msg.raw.buf.size());
     }
 };
 
@@ -459,12 +459,12 @@ class full_formatter SPDLOG_FINAL:public flag_formatter
 
         // Faster (albeit uglier) way to format the line (5.6 million lines/sec under 10 threads)
         msg.formatted << '[' << static_cast<unsigned int>(tm_time.tm_year + 1900) << '-'
-                      << fmt::pad(static_cast<unsigned int>(tm_time.tm_mon + 1), 2, '0') << '-'
-                      << fmt::pad(static_cast<unsigned int>(tm_time.tm_mday), 2, '0') << ' '
-                      << fmt::pad(static_cast<unsigned int>(tm_time.tm_hour), 2, '0') << ':'
-                      << fmt::pad(static_cast<unsigned int>(tm_time.tm_min), 2, '0') << ':'
-                      << fmt::pad(static_cast<unsigned int>(tm_time.tm_sec), 2, '0') << '.'
-                      << fmt::pad(static_cast<unsigned int>(millis), 3, '0') << "] ";
+                      << pad(static_cast<unsigned int>(tm_time.tm_mon + 1), 2, '0') << '-'
+                      << pad(static_cast<unsigned int>(tm_time.tm_mday), 2, '0') << ' '
+                      << pad(static_cast<unsigned int>(tm_time.tm_hour), 2, '0') << ':'
+                      << pad(static_cast<unsigned int>(tm_time.tm_min), 2, '0') << ':'
+                      << pad(static_cast<unsigned int>(tm_time.tm_sec), 2, '0') << '.'
+                      << pad(static_cast<unsigned int>(millis), 3, '0') << "] ";
 
         //no datetime needed
 #else
@@ -476,7 +476,7 @@ class full_formatter SPDLOG_FINAL:public flag_formatter
 #endif
 
         msg.formatted << '[' << level::to_str(msg.level) << "] ";
-        msg.formatted << fmt::StringRef(msg.raw.data(), msg.raw.size());
+        msg.formatted << fmt::string_view(msg.raw.data(), msg.raw.size());
     }
 };
 
@@ -682,5 +682,5 @@ inline void spdlog::pattern_formatter::format(details::log_msg& msg)
         f->format(msg, tm_time);
     }
     //write eol
-    msg.formatted.write(details::os::eol, details::os::eol_size);
+    fmt::writer(msg.formatted.buf).write(fmt::string_view(details::os::eol, details::os::eol_size));
 }
diff --git a/include/spdlog/fmt/fmt.h b/include/spdlog/fmt/fmt.h
index 33149bc..b90af5c 100644
--- a/include/spdlog/fmt/fmt.h
+++ b/include/spdlog/fmt/fmt.h
@@ -10,7 +10,7 @@
 // By default spdlog include its own copy.
 //
 
-#if !defined(SPDLOG_FMT_EXTERNAL)
+#if !1
 
 #ifndef FMT_HEADER_ONLY
 #define FMT_HEADER_ONLY
@@ -26,9 +26,37 @@
 #else //external fmtlib
 
 #include <fmt/format.h>
+#include <fmt/ostream.h>
 #if defined(SPDLOG_FMT_PRINTF)
 #include <fmt/printf.h>
 #endif
 
+namespace spdlog
+{
+    namespace details
+    {
+        struct MemoryWriter
+        {
+            fmt::memory_buffer buf;
+
+            template<class T>
+            MemoryWriter& operator<<(const T& t)
+            {
+                fmt::format_to(buf, "{}", t);
+            }
+
+            auto data() const { return buf.data(); }
+            auto size() const { return buf.size(); }
+        };
+
+        template<class T>
+        std::string pad(const T& t, int width, char p)
+        {
+            char fstr[] = { '{', ':', p, '>', '{', '}', '}', 0 };
+            return fmt::format(fstr, t, width);
+        }
+    }
+}
+
 #endif
 
diff --git a/include/spdlog/sinks/file_sinks.h b/include/spdlog/sinks/file_sinks.h
index e785617..f7e1854 100644
--- a/include/spdlog/sinks/file_sinks.h
+++ b/include/spdlog/sinks/file_sinks.h
@@ -81,18 +81,16 @@ public:
     // e.g. calc_filename("logs/mylog.txt, 3) => "logs/mylog.3.txt".
     static filename_t calc_filename(const filename_t& filename, std::size_t index)
     {
-        std::conditional<std::is_same<filename_t::value_type, char>::value, fmt::MemoryWriter, fmt::WMemoryWriter>::type w;
         if (index)
         {
             filename_t basename, ext;
             std::tie(basename, ext) = details::file_helper::split_by_extenstion(filename);
-            w.write(SPDLOG_FILENAME_T("{}.{}{}"), basename, index, ext);
+            return fmt::format(SPDLOG_FILENAME_T("{}.{}{}"), basename, index, ext);
         }
         else
         {
-            w.write(SPDLOG_FILENAME_T("{}"), filename);
+            return fmt::format(SPDLOG_FILENAME_T("{}"), filename);
         }
-        return w.str();
     }
 
 protected:
@@ -163,9 +161,7 @@ struct default_daily_file_name_calculator
         std::tm tm = spdlog::details::os::localtime();
         filename_t basename, ext;
         std::tie(basename, ext) = details::file_helper::split_by_extenstion(filename);
-        std::conditional<std::is_same<filename_t::value_type, char>::value, fmt::MemoryWriter, fmt::WMemoryWriter>::type w;
-        w.write(SPDLOG_FILENAME_T("{}_{:04d}-{:02d}-{:02d}_{:02d}-{:02d}{}"), basename, tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min, ext);
-        return w.str();
+        return fmt::format(SPDLOG_FILENAME_T("{}_{:04d}-{:02d}-{:02d}_{:02d}-{:02d}{}"), basename, tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min, ext);
     }
 };
 
@@ -180,9 +176,7 @@ struct dateonly_daily_file_name_calculator
         std::tm tm = spdlog::details::os::localtime();
         filename_t basename, ext;
         std::tie(basename, ext) = details::file_helper::split_by_extenstion(filename);
-        std::conditional<std::is_same<filename_t::value_type, char>::value, fmt::MemoryWriter, fmt::WMemoryWriter>::type w;
-        w.write(SPDLOG_FILENAME_T("{}_{:04d}-{:02d}-{:02d}{}"), basename, tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, ext);
-        return w.str();
+        return fmt::format(SPDLOG_FILENAME_T("{}_{:04d}-{:02d}-{:02d}{}"), basename, tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, ext);
     }
 };
 
